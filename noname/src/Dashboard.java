
import User.User;
import com.mysql.cj.protocol.Resultset;
import java.sql.PreparedStatement;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.lang.System.Logger;
import java.lang.System.Logger.Level;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import net.proteanit.sql.DbUtils;
import java.text.*;
import java.awt.print.*;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.util.ArrayList;
import javax.swing.table.TableModel;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author ARMEL UY ESTEVES
 */
public final class Dashboard extends javax.swing.JFrame {

    Connection conn = null;
    Statement stmt = null;
    ResultSet rs = null;
    PreparedStatement pst;
    String filename = null;
    byte[] person_image = null;
    File f = null;
    //private String filename;

    /**
     * Creates new form Dashboard
     */
    DefaultTableModel model;
    DefaultTableModel model2;
    DefaultTableModel model3;
    DefaultTableModel model4;

    public Dashboard() {
        super("Inventory System");
        this.setUndecorated(true);

        initComponents();
        conn = databaseConnection.connection();
        DateTime();
        Auto_Increment();
        showRecord();
        Auto_Increment_User();
        showTotalItem();
        Auto_IncrementTransaction();
        //setRecordsToTable();
        //JComboBox();
        AutoCompleteDecorator.decorate(Description);
        //JComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // time
    Timer t;
    SimpleDateFormat st;
    PreparedStatement inst;
    
    
    public void JComboBox(){
        try {
            stmt = conn.createStatement();
            rs = stmt.executeQuery("SELECT DESCRIPTION FROM stocks");
            while(rs.next()){
            String name = rs.getString("DESCRIPTION");
            Description.addItem(name);
            //Description_Stocks.addItem(name);
            //AutoCompleteDecorator.decorate(Description);
            //AutoCompleteDecorator.decorate(Description_Stocks);
            }
            conn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    
    public ArrayList<User> userList(){
        ArrayList<User> usersList = new ArrayList<>();
        try{
            String sql1 = "SELECT PRODUCT_ID, PRODUCT_NAME, DESCRIPTION, PRICE, STOCK, IMAGE FROM stocks";
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql1);
            User user;
            while(rs.next()){
                user = new User(rs.getInt("PRODUCT_ID"), rs.getString("PRODUCT_NAME"), rs.getString("DESCRIPTION"), rs.getString("PRICE"), rs.getString("STOCK"), rs.getBytes("IMAGE"));
                usersList.add(user);
            }
        }catch(Exception e){
            
        }
        return null;
    }
    
    public ArrayList<User> userList2(){
        ArrayList<User> usersList = new ArrayList<>();
        try{
            String sql1 = "SELECT USER_ID, FULLNAME, USERNAME, PASSWORD, USER_LEVEL, PICTURE FROM admin";
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql1);
            User user;
            while(rs.next()){
                user = new User(rs.getInt("USER_ID"), rs.getString("FULLNAME"), rs.getString("USERNAME"), rs.getString("PASSWORD"), rs.getString("USER_LEVEL"), rs.getBytes("PICTURE"));
                usersList.add(user);
            }
        }catch(Exception e){
            
        }
        return null;
    }

    @SuppressWarnings("CallToPrintStackTrace")
    public void setRecordsToTable() {
        try {
            conn = databaseConnection.connection();
            PreparedStatement pst = conn.prepareStatement("SELECT * FROM stocks WHERE STATUS='Added' or STATUS='Updated' or STATUS='Restored' ");
            rs = pst.executeQuery();

            while (rs.next()) {
                int ProductIDS = rs.getInt("PRODUCT_ID");
                String ProductNameS = rs.getString("PRODUCT_NAME");
                String DescriptionS = rs.getString("DESCRIPTION");
                String CategoryS = rs.getString("CATEGORY");
                int PriceS = rs.getInt("PRICE");
                int StockS = rs.getInt("STOCK");
                //
                Object[] obj = {ProductIDS, ProductNameS, DescriptionS, CategoryS, PriceS, StockS};
                model = (DefaultTableModel) cptable_stocks.getModel();
                model.addRow(obj);
            }

        } catch (SQLException e) {
            e.printStackTrace();

        }

        try {
            conn = databaseConnection.connection();
            int PID = rs.getInt("PRODUCT_ID");
            PreparedStatement pst = conn.prepareStatement("SELECT * FROM stocks WHERE PRODUCT_ID='" + PID + "'");
            rs = pst.executeQuery();

            while (rs.next()) {
                int ProductIDS = rs.getInt("PRODUCT_ID");
                String ProductNameS = rs.getString("PRODUCT_NAME");
                String DescriptionS = rs.getString("DESCRIPTION");
                String CategoryS = rs.getString("CATEGORY");
                int PriceS = rs.getInt("PRICE");
                int StockS = rs.getInt("STOCK");
                //
                Object[] obj = {ProductIDS, ProductNameS, DescriptionS, CategoryS, PriceS, StockS};
                model2 = (DefaultTableModel) HistoryTable.getModel();
                model2.addRow(obj);
            }

        } catch (SQLException e) {
            e.printStackTrace();

        }

        try {
            conn = databaseConnection.connection();
            int PID = rs.getInt("USER_ID");
            PreparedStatement pst = conn.prepareStatement("SELECT * FROM admin WHERE USER_ID='" + PID + "'");
            rs = pst.executeQuery();

            while (rs.next()) {
                int userid = rs.getInt("USER_ID");
                String fullname = rs.getString("FULLNAME");
                String username = rs.getString("USERNAME");
                String password = rs.getString("PASSWORD");
                String userlevel = rs.getString("USER_LEVEL");
                //
                Object[] obj = {userid, fullname, username, username, password, userlevel};
                model2 = (DefaultTableModel) HistoryTable.getModel();
                model2.addRow(obj);
            }

        } catch (SQLException e) {
            e.printStackTrace();

        }

    }

    public void StocksTableSearch() {
        int row = cptable_stocks.getSelectedRow();
        int vv = cptable_stocks.getSelectedColumn();

        String tc1 = cptable_stocks.getModel().getValueAt(row, 0).toString();

        try {
            String query = "SELECT * FROM stocks WHERE PRODUCT_ID='" + tc1 + "'";

            inst = conn.prepareStatement(query);
            rs = inst.executeQuery();
            if (rs.next()) {
                int ID = rs.getInt("PRODUCT_ID");
                String Name = rs.getString("PRODUCT_NAME");
                String Descript = rs.getString("DESCRIPTION");
                String Cat = rs.getString("CATEGORY");
                String Pr = rs.getString("PRICE");
                byte[] image = rs.getBytes("IMAGE");
                //format = new ImageIcon(image);
                //byte[] img = (userList().get(i).getImage());
                ImageIcon imageIcon = new ImageIcon(new ImageIcon(image).getImage().getScaledInstance(Pic.getWidth(), Pic.getHeight(), Image.SCALE_SMOOTH));
                Pic.setIcon(imageIcon);
                //String St = rs.getString("STOCK");
                //
                Product_ID_Stocks.setText("" + ID);
                Product_Name_Stocks.setText(Name);
                Description_Stocks.setSelectedItem(Descript);
                Category_Stocks.setSelectedItem(Cat);
                Price_Stocks.setText(Pr);
                
                
                //Stock_Stocks.setText(St);

                inst.close();
                rs.close();
            }

        } catch (SQLException e) {

        }
    }

    public void UserTableSearch() {
        int row = UserTable.getSelectedRow();
        int vv = UserTable.getSelectedColumn();

        String ut = UserTable.getModel().getValueAt(row, 0).toString();

        try {
            String query = "SELECT * FROM admin WHERE USER_ID='"+ut+"'";
            inst = conn.prepareStatement(query);
            rs = inst.executeQuery();
            if (rs.next()) {
                int ID = rs.getInt("USER_ID");
                String fullname = rs.getString("FULLNAME");
                String username = rs.getString("USERNAME");
                String password = rs.getString("PASSWORD");
                String userlevel = rs.getString("USER_LEVEL");
                
                
                byte[] image2 = rs.getBytes("PICTURE");
                //format = new ImageIcon(image);
                //byte[] img = (userList().get(i).getImage());
                ImageIcon imageIcon = new ImageIcon(new ImageIcon(image2).getImage().getScaledInstance(UserPicture.getWidth(), UserPicture.getHeight(), Image.SCALE_SMOOTH));
                UserPicture.setIcon(imageIcon);
                //
                UserID.setText("" + ID);
                Fullname.setText(fullname);
                Username.setText(username);
                Password.setText(password);
                UserLevel.setText(userlevel);
                

                inst.close();
                rs.close();

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);

        }
    }

    public void TransactionTableSearch() {
        int row = TransactionTable.getSelectedRow();
        int vv = TransactionTable.getSelectedColumn();

        String tr1 = TransactionTable.getModel().getValueAt(row, 0).toString();
        String tr = TransactionTable.getModel().getValueAt(row, 0).toString();

        try {
            String query = "SELECT * FROM transaction_history WHERE TRANSACTION_NO='" + tr + "' ";
            inst = conn.prepareStatement(query);
            rs = inst.executeQuery();
            if (rs.next()) {
                int ID = rs.getInt("PRODUCT_ID");
                int NOT = rs.getInt("TRANSACTION_NO");
                String NameT = rs.getString("DESCRIPTION");
                String priceT = rs.getString("PRICE");
                String stockT = rs.getString("STOCK");

                //
                TransactionID.setText("" + NOT);
                PurchaseID.setText("" + ID);
                PurchaseName.setText(NameT);
                PurchasePrice.setText(priceT);
                PurchaseQty.setText(stockT);

                inst.close();
                rs.close();

            }

        } catch (SQLException e) {

        }
    }

    public void PurchasedTableSearch() {
        int row = PurchaseTable.getSelectedRow();
        int vv = PurchaseTable.getSelectedColumn();

        String ut = PurchaseTable.getModel().getValueAt(row, 0).toString();

        try {
            String query = "SELECT * FROM stocks WHERE PRODUCT_ID='" + ut + "'";
            inst = conn.prepareStatement(query);
            rs = inst.executeQuery();
            if (rs.next()) {
                int ID = rs.getInt("PRODUCT_ID");
                String Name = rs.getString("DESCRIPTION");
                String price = rs.getString("PRICE");
                //
                PurchaseID.setText("" + ID);
                PurchaseName.setText(Name);
                PurchasePrice.setText(price);
                byte[] image2 = rs.getBytes("IMAGE");
                //format = new ImageIcon(image);
                //byte[] img = (userList().get(i).getImage());
                ImageIcon imageIcon = new ImageIcon(new ImageIcon(image2).getImage().getScaledInstance(Product_Picture.getWidth(), Product_Picture.getHeight(), Image.SCALE_SMOOTH));
                Product_Picture.setIcon(imageIcon);

                inst.close();
                rs.close();

            }

        } catch (SQLException e) {

        }
    }

    

    public void search(String str) {
        {
            model = (DefaultTableModel) cptable_stocks.getModel();
            TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model);
            cptable_stocks.setRowSorter(trs);
            trs.setRowFilter(RowFilter.regexFilter(str));
        }
        {
            model2 = (DefaultTableModel) HistoryTable.getModel();
            TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model2);
            HistoryTable.setRowSorter(trs);
            trs.setRowFilter(RowFilter.regexFilter(str));
        }
        {
            model3 = (DefaultTableModel) UserTable.getModel();
            TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model3);
            UserTable.setRowSorter(trs);
            trs.setRowFilter(RowFilter.regexFilter(str));
        }
        {
            model4 = (DefaultTableModel) TransactionTable.getModel();
            TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model4);
            TransactionTable.setRowSorter(trs);
            trs.setRowFilter(RowFilter.regexFilter(str));
        }
    }

    public void Log_out() {

        int response = JOptionPane.showConfirmDialog(this, "Do you want to Logout?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {
            System.out.println("Yes... Option Selected..");
            Login login = new Login();
            login.setVisible(true);
        } else if (response == JOptionPane.NO_OPTION) {
            System.out.println("No... Option Selected..");
        } //else if(response==JOptionPane.CLOSED_OPTION)
        else {
            System.out.println("Close... Option Selected..");
        }

    }

    public void Auto_Increment() {

        try {

            //Class.forName("com.mysql.jdbc.Driver");
            //conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/noname");
            String sql = "SELECT PRODUCT_ID FROM stocks ORDER BY PRODUCT_ID DESC LIMIT 1";
            inst = conn.prepareStatement(sql);
            rs = inst.executeQuery(sql);
            if (rs.next()) {
                int id = rs.getInt(1);
                int n = id + 1;
                Product_ID.setText(Integer.toString(n));
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public void Auto_IncrementTransaction() {
        try {

            //Class.forName("com.mysql.jdbc.Driver");
            //conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/noname");
            String sql = "SELECT TRANSACTION_NO FROM transaction_history ORDER BY TRANSACTION_NO DESC LIMIT 1";
            inst = conn.prepareStatement(sql);
            rs = inst.executeQuery(sql);
            if (rs.next()) {
                int id = rs.getInt(1);
                int n = id + 1;
                TransactionID.setText(Integer.toString(n));
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public void Auto_Increment_User() {
        try {

            //Class.forName("com.mysql.jdbc.Driver");
            //conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/noname");
            String sql = "SELECT USER_ID FROM admin ORDER BY USER_ID DESC LIMIT 1";
            inst = conn.prepareStatement(sql);
            rs = inst.executeQuery(sql);
            if (rs.next()) {
                int id = rs.getInt(1);
                int n = id + 1;
                UserID.setText(Integer.toString(n));
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public void DateTime() {

        t = new Timer(0, (ActionEvent e) -> {
            //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody

            Date d = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String dd = sdf.format(d);
            //date.setText(dd);    

            Date dt = new Date();
            st = new SimpleDateFormat("hh:mm:ss a");
            String tt = st.format(dt);
            DateNTime0.setText(tt);
            //time.setText(tt);

            DateNTime0.setText(tt + "  |  " + dd);
            //DateNTime1.setText(tt+"  |  "+dd);
            DateNTime2.setText(tt + "  |  " + dd);
            DateNTime3.setText(tt + "  |  " + dd);
            DateNTime5.setText(tt + "  |  " + dd);

            Date.setText(dd);
        });
        t.start();
    }

    //public void time(){
    //    t = new Timer(0, new ActionListener() {
    //        @Override
    //        public void actionPerformed(ActionEvent e) {
    //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody       
    //        Date dt = new Date();
    //        st = new SimpleDateFormat("hh:mm:ss a");
    //        String tt = st.format(dt);
    //        DateNTime0.setText(tt);
    //        }
    //    });
    //    t.start();
    //}
    public void showRecord() {

        try {
            stmt = conn.createStatement();
            String sql = "SELECT USER_ID, FULLNAME, USERNAME, PASSWORD, USER_LEVEL FROM admin";
            ResultSet res = stmt.executeQuery(sql);
            UserTable.setModel(DbUtils.resultSetToTableModel(res));

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }

        //try {
        //    stmt = conn.createStatement();
        //    String sql = "SELECT PRODUCT_ID, DATE, DESCRIPTION, CATEGORY, PRICE, STOCK FROM stocks";
        //    ResultSet res = stmt.executeQuery(sql);
        //    HistoryTable.setModel(DbUtils.resultSetToTableModel(res));

        //} catch (SQLException e) {
        //    JOptionPane.showMessageDialog(null, e);
        //}

        try {
            stmt = conn.createStatement();
            String sql = "SELECT PRODUCT_ID, DESCRIPTION, CATEGORY, PRICE, STOCK FROM stocks";
            ResultSet res = stmt.executeQuery(sql);
            PurchaseTable.setModel(DbUtils.resultSetToTableModel(res));

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }

        try {
            stmt = conn.createStatement();
            String sql = "SELECT PRODUCT_ID, DESCRIPTION, CATEGORY, PRICE, STOCK, DATE FROM stocks";
            ResultSet res = stmt.executeQuery(sql);
            cptable_stocks.setModel(DbUtils.resultSetToTableModel(res));

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
        try {
            stmt = conn.createStatement();
            String name = CustomerName.getText();
            String date = Date.getText();
            String sql = "SELECT TRANSACTION_NO, STOCK, DESCRIPTION, PRICE, DATE FROM transaction_history WHERE CUSTOMER_NAME='"+name+"' and DATE='"+date+"'";
            ResultSet res = stmt.executeQuery(sql);
            TransactionTable.setModel(DbUtils.resultSetToTableModel(res));

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        try {
            stmt = conn.createStatement();
            String name = CustomerName.getText();
            String date = Date.getText();
            String sql = "SELECT TRANSACTION_NO, STOCK, DESCRIPTION, PRICE, DATE FROM transaction_history WHERE CUSTOMER_NAME='"+name+"' and DATE='"+date+"'";
            ResultSet res = stmt.executeQuery(sql);
            HistoryTable.setModel(DbUtils.resultSetToTableModel(res));

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void showTotalItem() {

        try {

            //String sql = "SELECT count(*) FROM stocks";
            String sql = "SELECT FORMAT (SUM(PRICE * STOCK), 'c', 'en-PH') AS RESULT FROM stocks";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {

                String sum = rs.getString("RESULT");
                TotalPrice.setText(sum);
                TotalBalance.setText(sum);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }

        try {

            String sql = "SELECT FORMAT (SUM(STOCK), 'c', 'en-PH') AS RESULT FROM stocks";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                String sum = rs.getString("RESULT");
                TotalItem.setText(sum);
                TotalStock.setText(sum);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);

        }

        try {
            String date = Date.getText();
            String name = CustomerName.getText();
            String sql = "SELECT SUM(STOCK) as totalitem FROM transaction_history WHERE CUSTOMER_NAME='" + name + "' AND DATE='" + date + "'";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                String sum = rs.getString("totalitem");
                PurchaseTotalItem.setText(sum);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }

        try {
            String date = Date.getText();
            String name = CustomerName.getText();
            String sql = "SELECT FORMAT (SUM(PRICE * STOCK), 'c', 'en-PH') as totalprice FROM transaction_history WHERE CUSTOMER_NAME='" + name + "' AND DATE='" + date + "'";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                String sum = rs.getString("totalprice");
                TotalPricePurchase.setText(sum);
                IncomeToday.setText(sum);
                showRecord();
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }

        try {
            //String date = Date.getText();
            //String name = CustomerName.getText();
            String sql = "SELECT FORMAT (SUM(PRICE * STOCK), 'c', 'en-PH') AS RESULT FROM transaction_history";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                String sum = rs.getString("RESULT");
                TotalSales.setText(sum);
                TotalIncome.setText(sum);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextReciept = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        Reciept = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        ItemsB = new javax.swing.JButton();
        StocksB = new javax.swing.JButton();
        PurchaseB = new javax.swing.JButton();
        HistoryB = new javax.swing.JButton();
        cardlayout = new javax.swing.JPanel();
        home = new javax.swing.JPanel();
        DateNTime0 = new javax.swing.JLabel();
        TotalStock = new javax.swing.JLabel();
        TotalBalance = new javax.swing.JLabel();
        IncomeToday = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        Date = new javax.swing.JTextField();
        TotalIncome = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        InStockPanel = new javax.swing.JPanel();
        DateNTime2 = new javax.swing.JLabel();
        Product_ID_Stocks = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        Product_Name_Stocks = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        Description_Stocks = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        Category_Stocks = new javax.swing.JComboBox<>();
        Price_Stocks = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        Stock_Stocks = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        Edit_StocksB = new javax.swing.JButton();
        Clear_StocksB = new javax.swing.JButton();
        Search = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        Delete_StocksB = new javax.swing.JButton();
        Clear_StocksB2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        cptable_stocks = new javax.swing.JTable();
        TotalItem = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        TotalPrice = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        Pic = new javax.swing.JLabel();
        Edit_StocksB1 = new javax.swing.JButton();
        HistoryPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        HistoryTable = new javax.swing.JTable();
        DateNTime5 = new javax.swing.JLabel();
        SearchBar = new javax.swing.JComboBox<>();
        OptionPanel = new javax.swing.JPanel();
        UserID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        Password = new javax.swing.JPasswordField();
        show = new javax.swing.JCheckBox();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        Username = new javax.swing.JTextField();
        UserLevel = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        Fullname = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        UserTable = new javax.swing.JTable();
        jLabel22 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        UserPicture = new javax.swing.JLabel();
        UserPhoto = new javax.swing.JButton();
        OutStockPanel = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        TransactionTable = new javax.swing.JTable();
        jLabel41 = new javax.swing.JLabel();
        PurchaseName = new javax.swing.JTextField();
        PurchaseID = new javax.swing.JTextField();
        ClearB = new javax.swing.JButton();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        TotalPricePurchase = new javax.swing.JLabel();
        PurchaseQty = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        PurchaseButton = new javax.swing.JButton();
        CustomerName = new javax.swing.JTextField();
        PurchasePrice = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        PurchaseTotalItem = new javax.swing.JLabel();
        ClearB4 = new javax.swing.JButton();
        PrintTransaction = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        PurchaseTable = new javax.swing.JTable();
        RefreshB = new javax.swing.JButton();
        TotalPricePurchase3 = new javax.swing.JLabel();
        TotalSales = new javax.swing.JLabel();
        DateNTime4 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        TransactionID = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        Product_Picture = new javax.swing.JLabel();
        InsertPanel = new javax.swing.JPanel();
        DateNTime3 = new javax.swing.JLabel();
        Product_ID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Price = new javax.swing.JTextField();
        Stock = new javax.swing.JTextField();
        Add_Item = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        Product_Name = new javax.swing.JTextField();
        Description = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        Category = new javax.swing.JComboBox<>();
        PicInsert = new javax.swing.JLabel();
        Upload = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel35 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        logout = new javax.swing.JRadioButtonMenuItem();
        jMenu2 = new javax.swing.JMenu();
        Option = new javax.swing.JRadioButtonMenuItem();

        jScrollPane1.setViewportView(jTextReciept);

        Reciept.setColumns(20);
        Reciept.setRows(5);
        jScrollPane5.setViewportView(Reciept);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(12, 78, 17));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ItemsB.setBackground(new java.awt.Color(255, 255, 255));
        ItemsB.setFont(new java.awt.Font("SimSun", 1, 24)); // NOI18N
        ItemsB.setForeground(new java.awt.Color(51, 51, 51));
        ItemsB.setText("Add Item");
        ItemsB.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ItemsB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemsBActionPerformed(evt);
            }
        });
        jPanel1.add(ItemsB, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, 170, 50));

        StocksB.setBackground(new java.awt.Color(255, 255, 255));
        StocksB.setFont(new java.awt.Font("SimSun", 1, 24)); // NOI18N
        StocksB.setForeground(new java.awt.Color(51, 51, 51));
        StocksB.setText("In Stock");
        StocksB.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StocksB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StocksBActionPerformed(evt);
            }
        });
        jPanel1.add(StocksB, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, 170, 50));

        PurchaseB.setBackground(new java.awt.Color(255, 255, 255));
        PurchaseB.setFont(new java.awt.Font("SimSun", 1, 24)); // NOI18N
        PurchaseB.setForeground(new java.awt.Color(51, 51, 51));
        PurchaseB.setText("Out Stock");
        PurchaseB.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PurchaseB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PurchaseBActionPerformed(evt);
            }
        });
        jPanel1.add(PurchaseB, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 10, 170, 50));

        HistoryB.setBackground(new java.awt.Color(255, 255, 255));
        HistoryB.setFont(new java.awt.Font("SimSun", 1, 24)); // NOI18N
        HistoryB.setForeground(new java.awt.Color(51, 51, 51));
        HistoryB.setText("HISTORY");
        HistoryB.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        HistoryB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                HistoryBMouseEntered(evt);
            }
        });
        HistoryB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistoryBActionPerformed(evt);
            }
        });
        jPanel1.add(HistoryB, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 10, 170, 50));

        cardlayout.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cardlayout.setMinimumSize(new java.awt.Dimension(1260, 634));
        cardlayout.setLayout(new java.awt.CardLayout());

        home.setBackground(new java.awt.Color(255, 255, 255));
        home.setForeground(new java.awt.Color(0, 0, 0));
        home.setName(""); // NOI18N
        home.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DateNTime0.setBackground(new java.awt.Color(255, 255, 255));
        DateNTime0.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        DateNTime0.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "DATE AND TIME", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SimSun", 0, 10), new java.awt.Color(102, 102, 102)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(102, 102, 102))); // NOI18N
        home.add(DateNTime0, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 570, 270, 50));

        TotalStock.setFont(new java.awt.Font("SimSun", 0, 36)); // NOI18N
        TotalStock.setForeground(new java.awt.Color(0, 0, 0));
        home.add(TotalStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 150, 300, 70));

        TotalBalance.setFont(new java.awt.Font("SimSun", 0, 36)); // NOI18N
        TotalBalance.setForeground(new java.awt.Color(0, 0, 0));
        home.add(TotalBalance, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 150, 300, 70));

        IncomeToday.setFont(new java.awt.Font("SimSun", 0, 36)); // NOI18N
        IncomeToday.setForeground(new java.awt.Color(0, 0, 0));
        home.add(IncomeToday, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 370, 300, 70));

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo/OppoMascotLogo.jpg"))); // NOI18N
        home.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 490, 470));

        Date.setBackground(new java.awt.Color(255, 255, 255));
        Date.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        Date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateActionPerformed(evt);
            }
        });
        home.add(Date, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 220, 100, -1));

        TotalIncome.setFont(new java.awt.Font("SimSun", 0, 36)); // NOI18N
        TotalIncome.setForeground(new java.awt.Color(0, 0, 0));
        home.add(TotalIncome, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 370, 300, 70));

        jLabel31.setBackground(new java.awt.Color(51, 51, 51));
        jLabel31.setFont(new java.awt.Font("SimSun", 2, 18)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(51, 51, 51));
        jLabel31.setText("Total Income . . .");
        home.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 440, -1, -1));

        jLabel2.setBackground(new java.awt.Color(0, 204, 0));
        jLabel2.setFont(new java.awt.Font("SimSun", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        home.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 300, 340, 200));

        jLabel32.setBackground(new java.awt.Color(51, 51, 51));
        jLabel32.setFont(new java.awt.Font("SimSun", 2, 18)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(51, 51, 51));
        jLabel32.setText("Total Stock . . .");
        home.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 220, -1, -1));

        jLabel9.setBackground(new java.awt.Color(0, 0, 204));
        jLabel9.setFont(new java.awt.Font("SimSun", 0, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel9.setOpaque(true);
        home.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 80, 340, 200));

        jLabel33.setBackground(new java.awt.Color(51, 51, 51));
        jLabel33.setFont(new java.awt.Font("SimSun", 2, 18)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(51, 51, 51));
        jLabel33.setText("Total Balance . . .");
        home.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 220, -1, -1));

        jLabel27.setBackground(new java.awt.Color(204, 0, 0));
        jLabel27.setFont(new java.awt.Font("SimSun", 0, 36)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(0, 0, 0));
        jLabel27.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel27.setOpaque(true);
        home.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 80, 340, 200));

        jLabel34.setBackground(new java.awt.Color(51, 51, 51));
        jLabel34.setFont(new java.awt.Font("SimSun", 2, 18)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(51, 51, 51));
        jLabel34.setText("Income Today . . .");
        home.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 440, -1, -1));

        jLabel30.setBackground(new java.awt.Color(204, 204, 0));
        jLabel30.setFont(new java.awt.Font("SimSun", 0, 36)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(0, 0, 0));
        jLabel30.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel30.setOpaque(true);
        home.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 300, 340, 200));

        cardlayout.add(home, "card2");

        InStockPanel.setBackground(new java.awt.Color(255, 255, 255));
        InStockPanel.setEnabled(false);
        InStockPanel.setMinimumSize(new java.awt.Dimension(1260, 634));
        InStockPanel.setPreferredSize(new java.awt.Dimension(1260, 630));
        InStockPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DateNTime2.setBackground(new java.awt.Color(255, 255, 255));
        DateNTime2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        DateNTime2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "DATE AND TIME", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SimSun", 0, 10), new java.awt.Color(102, 102, 102)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(102, 102, 102))); // NOI18N
        InStockPanel.add(DateNTime2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 590, 190, 40));

        Product_ID_Stocks.setBackground(new java.awt.Color(255, 255, 255));
        Product_ID_Stocks.setFont(new java.awt.Font("SimSun", 0, 16)); // NOI18N
        Product_ID_Stocks.setForeground(new java.awt.Color(0, 0, 0));
        Product_ID_Stocks.setEnabled(false);
        InStockPanel.add(Product_ID_Stocks, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 230, 200, -1));

        jLabel12.setFont(new java.awt.Font("SimSun", 0, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Product Name");
        InStockPanel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 270, -1, -1));

        Product_Name_Stocks.setBackground(new java.awt.Color(255, 255, 255));
        Product_Name_Stocks.setFont(new java.awt.Font("SimSun", 0, 16)); // NOI18N
        Product_Name_Stocks.setForeground(new java.awt.Color(0, 0, 0));
        Product_Name_Stocks.setText("OPPO");
        Product_Name_Stocks.setEnabled(false);
        Product_Name_Stocks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Product_Name_StocksActionPerformed(evt);
            }
        });
        InStockPanel.add(Product_Name_Stocks, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 270, 200, -1));

        jLabel13.setFont(new java.awt.Font("SimSun", 0, 16)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Description");
        InStockPanel.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 310, -1, -1));

        Description_Stocks.setBackground(new java.awt.Color(255, 255, 255));
        Description_Stocks.setEditable(true);
        Description_Stocks.setFont(new java.awt.Font("SimSun", 0, 16)); // NOI18N
        Description_Stocks.setForeground(new java.awt.Color(0, 0, 0));
        Description_Stocks.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select here" }));
        Description_Stocks.setToolTipText("");
        Description_Stocks.setEnabled(false);
        Description_Stocks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Description_StocksActionPerformed(evt);
            }
        });
        Description_Stocks.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                Description_StocksPropertyChange(evt);
            }
        });
        InStockPanel.add(Description_Stocks, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 310, 200, -1));

        jLabel14.setFont(new java.awt.Font("SimSun", 0, 16)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Category");
        InStockPanel.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 350, -1, -1));

        jLabel15.setFont(new java.awt.Font("SimSun", 0, 16)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("Price");
        InStockPanel.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 390, -1, -1));

        Category_Stocks.setBackground(new java.awt.Color(255, 255, 255));
        Category_Stocks.setFont(new java.awt.Font("SimSun", 0, 16)); // NOI18N
        Category_Stocks.setForeground(new java.awt.Color(0, 0, 0));
        Category_Stocks.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select here", "Smartphone", "Tablet", "Wearables", "Audio", "Router" }));
        Category_Stocks.setToolTipText("");
        Category_Stocks.setEnabled(false);
        Category_Stocks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Category_StocksActionPerformed(evt);
            }
        });
        InStockPanel.add(Category_Stocks, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 350, 200, -1));

        Price_Stocks.setBackground(new java.awt.Color(255, 255, 255));
        Price_Stocks.setFont(new java.awt.Font("SimSun", 0, 16)); // NOI18N
        Price_Stocks.setForeground(new java.awt.Color(0, 0, 0));
        Price_Stocks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Price_StocksKeyPressed(evt);
            }
        });
        InStockPanel.add(Price_Stocks, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 390, 200, -1));

        jLabel16.setFont(new java.awt.Font("SimSun", 0, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 0, 0));
        jLabel16.setText("Total Price:");
        InStockPanel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 580, -1, -1));

        Stock_Stocks.setBackground(new java.awt.Color(255, 255, 255));
        Stock_Stocks.setFont(new java.awt.Font("SimSun", 0, 16)); // NOI18N
        Stock_Stocks.setForeground(new java.awt.Color(0, 0, 0));
        Stock_Stocks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Stock_StocksKeyPressed(evt);
            }
        });
        InStockPanel.add(Stock_Stocks, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 430, 200, -1));

        jLabel17.setFont(new java.awt.Font("SimSun", 1, 24)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 0));
        jLabel17.setText("- STOCKS ITEM -");
        InStockPanel.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, -1, -1));

        Edit_StocksB.setBackground(new java.awt.Color(255, 255, 255));
        Edit_StocksB.setFont(new java.awt.Font("SimSun", 0, 12)); // NOI18N
        Edit_StocksB.setForeground(new java.awt.Color(0, 0, 0));
        Edit_StocksB.setText("Add");
        Edit_StocksB.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Edit_StocksB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_StocksBActionPerformed(evt);
            }
        });
        InStockPanel.add(Edit_StocksB, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 460, 70, 20));

        Clear_StocksB.setBackground(new java.awt.Color(255, 255, 255));
        Clear_StocksB.setFont(new java.awt.Font("SimSun", 0, 15)); // NOI18N
        Clear_StocksB.setForeground(new java.awt.Color(0, 0, 0));
        Clear_StocksB.setText("Clear");
        Clear_StocksB.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Clear_StocksB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Clear_StocksBActionPerformed(evt);
            }
        });
        InStockPanel.add(Clear_StocksB, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 540, 120, 40));

        Search.setBackground(new java.awt.Color(255, 255, 255));
        Search.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SearchMouseReleased(evt);
            }
        });
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });
        InStockPanel.add(Search, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 20, 180, -1));

        jLabel18.setFont(new java.awt.Font("SimSun", 0, 16)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(0, 0, 0));
        jLabel18.setText("Product ID");
        InStockPanel.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, -1, -1));

        Delete_StocksB.setBackground(new java.awt.Color(255, 255, 255));
        Delete_StocksB.setFont(new java.awt.Font("SimSun", 0, 15)); // NOI18N
        Delete_StocksB.setForeground(new java.awt.Color(0, 0, 0));
        Delete_StocksB.setText("Delete Item");
        Delete_StocksB.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Delete_StocksB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_StocksBActionPerformed(evt);
            }
        });
        InStockPanel.add(Delete_StocksB, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 490, 120, 40));

        Clear_StocksB2.setBackground(new java.awt.Color(255, 255, 255));
        Clear_StocksB2.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        Clear_StocksB2.setForeground(new java.awt.Color(0, 0, 0));
        Clear_StocksB2.setText("Search");
        Clear_StocksB2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Clear_StocksB2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Clear_StocksB2ActionPerformed(evt);
            }
        });
        InStockPanel.add(Clear_StocksB2, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 20, 130, 20));

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "OPPO INVENTORY", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        cptable_stocks.setBackground(new java.awt.Color(255, 255, 255));
        cptable_stocks.setForeground(new java.awt.Color(0, 0, 0));
        cptable_stocks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        cptable_stocks.setShowGrid(true);
        cptable_stocks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cptable_stocksMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(cptable_stocks);

        InStockPanel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 50, 810, 500));

        TotalItem.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        TotalItem.setForeground(new java.awt.Color(0, 0, 0));
        TotalItem.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                TotalItemAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        InStockPanel.add(TotalItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 570, 210, 40));

        jLabel25.setFont(new java.awt.Font("SimSun", 0, 16)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(0, 0, 0));
        jLabel25.setText("Add Stock");
        InStockPanel.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 430, -1, -1));

        TotalPrice.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        TotalPrice.setForeground(new java.awt.Color(0, 0, 0));
        TotalPrice.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                TotalPriceAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        InStockPanel.add(TotalPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 570, 210, 40));

        jLabel24.setFont(new java.awt.Font("SimSun", 0, 18)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(0, 0, 0));
        jLabel24.setText("Total Item:");
        InStockPanel.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 580, -1, -1));

        Pic.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        Pic.setText("           ITEM DETAIL");
        Pic.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        InStockPanel.add(Pic, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 390, 160));

        Edit_StocksB1.setBackground(new java.awt.Color(255, 255, 255));
        Edit_StocksB1.setFont(new java.awt.Font("SimSun", 0, 15)); // NOI18N
        Edit_StocksB1.setForeground(new java.awt.Color(0, 0, 0));
        Edit_StocksB1.setText("Update Item");
        Edit_StocksB1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Edit_StocksB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_StocksB1ActionPerformed(evt);
            }
        });
        InStockPanel.add(Edit_StocksB1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 490, 120, 40));

        cardlayout.add(InStockPanel, "card4");

        HistoryPanel.setBackground(new java.awt.Color(255, 255, 255));
        HistoryPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        HistoryTable.setBackground(new java.awt.Color(255, 255, 255));
        HistoryTable.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        HistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        HistoryTable.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                HistoryTableAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        HistoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HistoryTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(HistoryTable);

        HistoryPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 1210, 500));

        DateNTime5.setBackground(new java.awt.Color(255, 255, 255));
        DateNTime5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        DateNTime5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "DATE AND TIME", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SimSun", 0, 10), new java.awt.Color(102, 102, 102)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(102, 102, 102))); // NOI18N
        HistoryPanel.add(DateNTime5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 580, 190, 40));

        SearchBar.setBackground(new java.awt.Color(255, 255, 255));
        SearchBar.setEditable(true);
        SearchBar.setForeground(new java.awt.Color(0, 0, 0));
        SearchBar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Here. . .", "Out Product", "Item", "Deleted" }));
        SearchBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchBarMouseClicked(evt);
            }
        });
        SearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBarActionPerformed(evt);
            }
        });
        HistoryPanel.add(SearchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 190, -1));

        cardlayout.add(HistoryPanel, "card8");

        OptionPanel.setBackground(new java.awt.Color(255, 255, 255));
        OptionPanel.setPreferredSize(new java.awt.Dimension(1260, 1260));
        OptionPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        UserID.setBackground(new java.awt.Color(255, 255, 255));
        UserID.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        OptionPanel.add(UserID, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 260, 190, 30));

        jLabel3.setFont(new java.awt.Font("SimSun", 0, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("- ADMIN SETTING -");
        OptionPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        jLabel11.setFont(new java.awt.Font("SimSun", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Password:");
        OptionPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 410, -1, -1));

        Password.setBackground(new java.awt.Color(255, 255, 255));
        Password.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        OptionPanel.add(Password, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 410, 190, 30));

        show.setBackground(new java.awt.Color(255, 255, 255));
        show.setFont(new java.awt.Font("SimSun", 0, 10)); // NOI18N
        show.setText("show password");
        show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showActionPerformed(evt);
            }
        });
        OptionPanel.add(show, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 450, -1, -1));

        jLabel19.setFont(new java.awt.Font("SimSun", 0, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 0));
        jLabel19.setText("Fullname:");
        OptionPanel.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 310, -1, -1));

        jLabel20.setFont(new java.awt.Font("SimSun", 0, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 0, 0));
        jLabel20.setText("Username:");
        OptionPanel.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 360, -1, -1));

        Username.setBackground(new java.awt.Color(255, 255, 255));
        Username.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        OptionPanel.add(Username, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 360, 190, 30));

        UserLevel.setBackground(new java.awt.Color(255, 255, 255));
        UserLevel.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        OptionPanel.add(UserLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 480, 190, 30));

        jLabel21.setFont(new java.awt.Font("SimSun", 0, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 0, 0));
        jLabel21.setText("User_Status:");
        OptionPanel.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 480, -1, -1));

        Fullname.setBackground(new java.awt.Color(255, 255, 255));
        Fullname.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        OptionPanel.add(Fullname, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 310, 190, 30));

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("SimSun", 0, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 0, 0));
        jButton3.setText("Add");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        OptionPanel.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 530, 110, 30));

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setFont(new java.awt.Font("SimSun", 0, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 0, 0));
        jButton4.setText("Update");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        OptionPanel.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 530, 110, 30));

        UserTable.setBackground(new java.awt.Color(255, 255, 255));
        UserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        UserTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UserTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(UserTable);

        OptionPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 60, 710, 530));

        jLabel22.setFont(new java.awt.Font("SimSun", 0, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(0, 0, 0));
        jLabel22.setText("User_ID: ");
        OptionPanel.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 260, -1, -1));

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setFont(new java.awt.Font("SimSun", 0, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(0, 0, 0));
        jButton5.setText("Refresh");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        OptionPanel.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 30, -1, -1));

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setFont(new java.awt.Font("SimSun", 0, 18)); // NOI18N
        jButton6.setForeground(new java.awt.Color(0, 0, 0));
        jButton6.setText("Delete");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        OptionPanel.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 570, 110, 30));

        UserPicture.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        OptionPanel.add(UserPicture, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 230, 160));

        UserPhoto.setBackground(new java.awt.Color(255, 255, 255));
        UserPhoto.setText("ADD PHOTO");
        UserPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserPhotoActionPerformed(evt);
            }
        });
        OptionPanel.add(UserPhoto, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 230, 160));

        cardlayout.add(OptionPanel, "card7");

        OutStockPanel.setBackground(new java.awt.Color(255, 255, 255));
        OutStockPanel.setPreferredSize(new java.awt.Dimension(1260, 640));
        OutStockPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Product(s) Out", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SimSun", 0, 18), new java.awt.Color(0, 0, 0))); // NOI18N

        TransactionTable.setBackground(new java.awt.Color(255, 255, 255));
        TransactionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TransactionTable.setShowGrid(true);
        TransactionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TransactionTableMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(TransactionTable);

        OutStockPanel.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 260, 650, 270));

        jLabel41.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(0, 0, 0));
        jLabel41.setText("Product:");
        OutStockPanel.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 110, -1, -1));

        PurchaseName.setBackground(new java.awt.Color(255, 255, 255));
        PurchaseName.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        PurchaseName.setForeground(new java.awt.Color(0, 0, 0));
        PurchaseName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PurchaseNameActionPerformed(evt);
            }
        });
        OutStockPanel.add(PurchaseName, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 100, 130, 30));

        PurchaseID.setBackground(new java.awt.Color(255, 255, 255));
        PurchaseID.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        PurchaseID.setForeground(new java.awt.Color(0, 0, 0));
        PurchaseID.setEnabled(false);
        PurchaseID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PurchaseIDActionPerformed(evt);
            }
        });
        OutStockPanel.add(PurchaseID, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 20, 130, 30));

        ClearB.setBackground(new java.awt.Color(255, 255, 255));
        ClearB.setFont(new java.awt.Font("SimSun", 0, 10)); // NOI18N
        ClearB.setForeground(new java.awt.Color(0, 0, 0));
        ClearB.setText("Back Item");
        ClearB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBActionPerformed(evt);
            }
        });
        OutStockPanel.add(ClearB, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 230, 110, 30));

        jLabel43.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(0, 0, 0));
        jLabel43.setText("Product ID:");
        OutStockPanel.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 30, -1, -1));

        jLabel44.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(0, 0, 0));
        jLabel44.setText("Total Items:");
        OutStockPanel.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 540, 90, 20));

        TotalPricePurchase.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        TotalPricePurchase.setForeground(new java.awt.Color(0, 0, 0));
        OutStockPanel.add(TotalPricePurchase, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 570, 210, 40));

        PurchaseQty.setBackground(new java.awt.Color(255, 255, 255));
        PurchaseQty.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        PurchaseQty.setForeground(new java.awt.Color(0, 0, 0));
        PurchaseQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PurchaseQtyActionPerformed(evt);
            }
        });
        PurchaseQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PurchaseQtyKeyPressed(evt);
            }
        });
        OutStockPanel.add(PurchaseQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 180, 130, 30));

        jLabel29.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(0, 0, 0));
        jLabel29.setText("Price:");
        OutStockPanel.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 70, -1, -1));

        PurchaseButton.setBackground(new java.awt.Color(255, 255, 255));
        PurchaseButton.setFont(new java.awt.Font("SimSun", 0, 12)); // NOI18N
        PurchaseButton.setForeground(new java.awt.Color(0, 0, 0));
        PurchaseButton.setText("Out Product");
        PurchaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PurchaseButtonActionPerformed(evt);
            }
        });
        OutStockPanel.add(PurchaseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 220, 100, 30));

        CustomerName.setBackground(new java.awt.Color(255, 255, 255));
        CustomerName.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        CustomerName.setForeground(new java.awt.Color(0, 0, 0));
        CustomerName.setText("OPPO SHOP");
        CustomerName.setEnabled(false);
        CustomerName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CustomerNameMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CustomerNameMouseReleased(evt);
            }
        });
        CustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerNameActionPerformed(evt);
            }
        });
        OutStockPanel.add(CustomerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 140, 130, 30));

        PurchasePrice.setBackground(new java.awt.Color(255, 255, 255));
        PurchasePrice.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        PurchasePrice.setForeground(new java.awt.Color(0, 0, 0));
        PurchasePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PurchasePriceActionPerformed(evt);
            }
        });
        OutStockPanel.add(PurchasePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 60, 130, 30));

        jLabel48.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(0, 0, 0));
        jLabel48.setText("Customer Name:");
        OutStockPanel.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 150, -1, -1));

        PurchaseTotalItem.setBackground(new java.awt.Color(255, 255, 255));
        PurchaseTotalItem.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        PurchaseTotalItem.setForeground(new java.awt.Color(0, 0, 0));
        PurchaseTotalItem.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                PurchaseTotalItemAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        OutStockPanel.add(PurchaseTotalItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 530, 210, 40));

        ClearB4.setBackground(new java.awt.Color(255, 255, 255));
        ClearB4.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        ClearB4.setForeground(new java.awt.Color(0, 0, 0));
        ClearB4.setText("Clear");
        ClearB4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearB4ActionPerformed(evt);
            }
        });
        OutStockPanel.add(ClearB4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 540, 140, 40));

        PrintTransaction.setBackground(new java.awt.Color(0, 102, 51));
        PrintTransaction.setFont(new java.awt.Font("SimSun", 0, 12)); // NOI18N
        PrintTransaction.setForeground(new java.awt.Color(0, 0, 0));
        PrintTransaction.setText("Print");
        PrintTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintTransactionActionPerformed(evt);
            }
        });
        OutStockPanel.add(PrintTransaction, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 590, 290, -1));

        PurchaseTable.setBackground(new java.awt.Color(255, 255, 255));
        PurchaseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        PurchaseTable.setShowGrid(true);
        PurchaseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PurchaseTableMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(PurchaseTable);

        OutStockPanel.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 540, 500));

        RefreshB.setBackground(new java.awt.Color(255, 255, 255));
        RefreshB.setFont(new java.awt.Font("SimSun", 0, 12)); // NOI18N
        RefreshB.setForeground(new java.awt.Color(0, 0, 0));
        RefreshB.setText("Refresh");
        RefreshB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshBActionPerformed(evt);
            }
        });
        OutStockPanel.add(RefreshB, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 40, 120, 20));

        TotalPricePurchase3.setBackground(new java.awt.Color(255, 255, 255));
        TotalPricePurchase3.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        TotalPricePurchase3.setForeground(new java.awt.Color(0, 0, 0));
        TotalPricePurchase3.setText("Total Sales: php.");
        OutStockPanel.add(TotalPricePurchase3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 580, -1, 30));

        TotalSales.setBackground(new java.awt.Color(255, 255, 255));
        TotalSales.setFont(new java.awt.Font("SimSun", 0, 18)); // NOI18N
        TotalSales.setForeground(new java.awt.Color(0, 0, 0));
        OutStockPanel.add(TotalSales, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 580, 220, 30));

        DateNTime4.setBackground(new java.awt.Color(255, 255, 255));
        DateNTime4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        DateNTime4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "DATE AND TIME", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SimSun", 0, 10), new java.awt.Color(102, 102, 102)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(102, 102, 102))); // NOI18N
        OutStockPanel.add(DateNTime4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 590, 190, 40));

        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);
        OutStockPanel.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 0, 10, 640));

        jSeparator7.setOrientation(javax.swing.SwingConstants.VERTICAL);
        OutStockPanel.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 0, 10, 640));

        TransactionID.setBackground(new java.awt.Color(255, 255, 255));
        TransactionID.setFont(new java.awt.Font("SimSun", 0, 15)); // NOI18N
        TransactionID.setForeground(new java.awt.Color(0, 0, 0));
        OutStockPanel.add(TransactionID, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 360, 170, -1));

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        OutStockPanel.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 540, 140, 40));

        jLabel28.setFont(new java.awt.Font("SimSun", 0, 16)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(0, 0, 0));
        jLabel28.setText("Quantity:");
        OutStockPanel.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 190, -1, -1));

        jLabel49.setFont(new java.awt.Font("SimSun", 0, 14)); // NOI18N
        jLabel49.setForeground(new java.awt.Color(0, 0, 0));
        jLabel49.setText("Total Price:");
        OutStockPanel.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 580, 90, 20));

        Product_Picture.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        OutStockPanel.add(Product_Picture, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 10, 410, 200));

        cardlayout.add(OutStockPanel, "card8");

        InsertPanel.setBackground(new java.awt.Color(255, 255, 255));
        InsertPanel.setPreferredSize(new java.awt.Dimension(1260, 634));
        InsertPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DateNTime3.setBackground(new java.awt.Color(255, 255, 255));
        DateNTime3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        DateNTime3.setForeground(new java.awt.Color(0, 0, 0));
        DateNTime3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "DATE AND TIME", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SimSun", 0, 10), new java.awt.Color(51, 51, 51)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        InsertPanel.add(DateNTime3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 590, 190, 40));

        Product_ID.setBackground(new java.awt.Color(255, 255, 255));
        Product_ID.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        Product_ID.setEnabled(false);
        InsertPanel.add(Product_ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 170, 280, -1));

        jLabel4.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Product Name");
        InsertPanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        jLabel5.setFont(new java.awt.Font("SimSun", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("- INSERT ITEM -");
        InsertPanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, -1, -1));

        jLabel6.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Description");
        InsertPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, -1, -1));

        jLabel7.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Category");
        InsertPanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, -1, -1));

        jLabel8.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Price");
        InsertPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 370, -1, -1));

        Price.setBackground(new java.awt.Color(255, 255, 255));
        Price.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        Price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PriceKeyPressed(evt);
            }
        });
        InsertPanel.add(Price, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 370, 280, -1));

        Stock.setBackground(new java.awt.Color(255, 255, 255));
        Stock.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        Stock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                StockKeyPressed(evt);
            }
        });
        InsertPanel.add(Stock, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 420, 280, -1));

        Add_Item.setBackground(new java.awt.Color(255, 255, 255));
        Add_Item.setFont(new java.awt.Font("SimSun", 0, 21)); // NOI18N
        Add_Item.setForeground(new java.awt.Color(0, 0, 0));
        Add_Item.setText("Add Item");
        Add_Item.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Add_Item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_ItemActionPerformed(evt);
            }
        });
        InsertPanel.add(Add_Item, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 490, 150, 50));

        Clear.setBackground(new java.awt.Color(255, 255, 255));
        Clear.setFont(new java.awt.Font("SimSun", 0, 18)); // NOI18N
        Clear.setForeground(new java.awt.Color(0, 0, 0));
        Clear.setText("Clear");
        Clear.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });
        InsertPanel.add(Clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 490, 150, 50));

        Product_Name.setBackground(new java.awt.Color(255, 255, 255));
        Product_Name.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        Product_Name.setText("OPPO");
        Product_Name.setEnabled(false);
        Product_Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Product_NameActionPerformed(evt);
            }
        });
        InsertPanel.add(Product_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 220, 280, -1));

        Description.setBackground(new java.awt.Color(255, 255, 255));
        Description.setEditable(true);
        Description.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        Description.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select here" }));
        Description.setToolTipText("");
        Description.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                DescriptionComponentAdded(evt);
            }
        });
        Description.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DescriptionActionPerformed(evt);
            }
        });
        InsertPanel.add(Description, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 270, 280, -1));

        jLabel10.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Product ID");
        InsertPanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, -1, -1));

        Category.setBackground(new java.awt.Color(255, 255, 255));
        Category.setEditable(true);
        Category.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        Category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select here", "Smartphone", "Tablet", "Wearables", "Audio", "Router" }));
        Category.setToolTipText("");
        Category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryActionPerformed(evt);
            }
        });
        InsertPanel.add(Category, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 320, 280, -1));

        PicInsert.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        PicInsert.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        InsertPanel.add(PicInsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 140, 700, 330));

        Upload.setBackground(new java.awt.Color(255, 255, 255));
        Upload.setFont(new java.awt.Font("SimSun", 0, 36)); // NOI18N
        Upload.setForeground(new java.awt.Color(0, 0, 0));
        Upload.setText("ADD PICTURE");
        Upload.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UploadActionPerformed(evt);
            }
        });
        InsertPanel.add(Upload, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 140, 700, 330));

        jLabel23.setFont(new java.awt.Font("SimSun", 0, 24)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(0, 0, 0));
        jLabel23.setText("Stock");
        InsertPanel.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 420, -1, -1));

        cardlayout.add(InsertPanel, "card5");

        jPanel1.add(cardlayout, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 1260, 630));

        jLabel1.setFont(new java.awt.Font("Impact", 2, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo/OppoLogo.png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 210, 70));

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, 570, 40));

        jLabel35.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo/background.png"))); // NOI18N
        jPanel1.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1260, 70));

        jMenuBar1.setBackground(new java.awt.Color(204, 255, 204));

        jMenu1.setBackground(new java.awt.Color(255, 255, 255));
        jMenu1.setForeground(new java.awt.Color(0, 0, 0));
        jMenu1.setText("Account");

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("Logout");
        jRadioButtonMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jRadioButtonMenuItem1);

        logout.setSelected(true);
        logout.setText("Hide");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        jMenu1.add(logout);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        Option.setSelected(true);
        Option.setText("ADMIN OPTION");
        Option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptionActionPerformed(evt);
            }
        });
        jMenu2.add(Option);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1258, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void HistoryBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HistoryBMouseEntered
        // TODO add your handling code here:

    }//GEN-LAST:event_HistoryBMouseEntered

    private void HistoryBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistoryBActionPerformed
        // TODO add your handling code here:
        cardlayout.removeAll();
        cardlayout.add(HistoryPanel);
        cardlayout.repaint();
        cardlayout.revalidate();
    }//GEN-LAST:event_HistoryBActionPerformed

    private void PurchaseBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PurchaseBActionPerformed
        // TODO add your handling code here:
        showTotalItem();
        showRecord();
        cardlayout.removeAll();
        cardlayout.add(OutStockPanel);
        cardlayout.repaint();
        cardlayout.revalidate();
    }//GEN-LAST:event_PurchaseBActionPerformed

    private void StocksBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StocksBActionPerformed
        // TODO add your handling code here:
        cardlayout.removeAll();
        cardlayout.add(InStockPanel);
        cardlayout.repaint();
        cardlayout.revalidate();
    }//GEN-LAST:event_StocksBActionPerformed

    private void ItemsBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemsBActionPerformed
        // TODO add your handling code here:
        Category.setSelectedItem("");
        Description.setSelectedItem("");
        cardlayout.removeAll();
        cardlayout.add(InsertPanel);
        cardlayout.repaint();
        cardlayout.revalidate();

    }//GEN-LAST:event_ItemsBActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        cardlayout.removeAll();
        cardlayout.add(home);
        cardlayout.repaint();
        cardlayout.revalidate();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void Add_ItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_ItemActionPerformed
        // TODO add your handling code here:
        //try {
        //    stmt = conn.createStatement();
        //    String sql = "INSERT INTO stocks(PRODUCT_ID, PRODUCT_NAME, DESCRIPTION, CATEGORY, PRICE, STOCK, IMAGE, DATE, STATUS) VALUES('" + Product_ID.getText() + "','" + Product_Name.getText() + "','" + Description.getSelectedItem() + "','" + Category.getSelectedItem() + "','" + Price.getText() + "','" + Stock.getText() + "','" + PicInsert.getIcon() + "','" + Date.getText() + "', 'Added')";
        //    //String sql1 = "INSERT INTO section(GRADE_LEVEL, LASTNAME, FIRSTNAME, MIDDLENAME, SECTION, SCHOOL_YEAR) VALUES('"+GradeLevel.getSelectedItem()+"','"+LastName.getText()+"','"+FirstName.getText()+"','"+MiddleName.getText()+"','"+Section.getSelectedItem()+"','"+SchoolYear.getSelectedItem()+"') ";
        //    DefaultTableModel model = (DefaultTableModel) HistoryTable.getModel(); // to refresh the show table
        //    model.setRowCount(0); // to direct input data into table
        //    DefaultTableModel model2 = (DefaultTableModel) cptable_stocks.getModel(); // to refresh the show table
        //    model2.setRowCount(0); // to direct input data into table
        //    showRecord(); //show table
        //    Auto_Increment();

        ///    JOptionPane.showMessageDialog(null, "Data is Successfully inserted");

        //} catch (HeadlessException | SQLException e) {
        //    JOptionPane.showMessageDialog(null, "Textbox is Empty");
         //   //JOptionPane.showMessageDialog(null, e);
       // }
        try{
            String sql = "INSERT INTO stocks(PRODUCT_ID, PRODUCT_NAME, DESCRIPTION, CATEGORY, PRICE, STOCK, DATE, IMAGE) VALUES(?, ?, ?, ?, ?, ?, ?, ?)";
            
            if(person_image.getClass().equals(null)){
                JOptionPane.showMessageDialog(null, "Please Insert Photo. . .");
            }else {
            pst = conn.prepareStatement(sql);
            pst.setString(1, Product_ID.getText());
            pst.setString(2, Product_Name.getText());
            pst.setString(3, (String) Description.getSelectedItem());
            pst.setString(4, (String)Category.getSelectedItem());
            pst.setString(5, Price.getText());
            pst.setString(6, Stock.getText());
            pst.setString(7, Date.getText());
            pst.setBytes(8, person_image);
            //pst.setString(9, person.getText());
            pst.executeUpdate();
            
            JOptionPane.showMessageDialog(null, "Data is Successfully inserted");
            Auto_Increment();
            showRecord(); //show table
            PicInsert.setIcon(null);
            Product_Name.setText("OPPO");
            Description.setSelectedItem("");
            Category.setSelectedItem("");
            Price.setText("");
            Stock.setText("");
            }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Fill the Blank. . .\n& add Picture");
        }
        

    }//GEN-LAST:event_Add_ItemActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        // TODO add your handling code here:
        PicInsert.setIcon(null);
        Product_Name.setText("OPPO");
        Description.setSelectedItem("");
        Category.setSelectedItem("");
        Price.setText("");
        Stock.setText("");
        DefaultTableModel model00 = (DefaultTableModel) HistoryTable.getModel(); // to refresh the show table
        model00.setRowCount(0); // to direct input data into table
        showRecord(); //show table
    }//GEN-LAST:event_ClearActionPerformed

    private void DescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DescriptionActionPerformed
        // TODO add your handling code here:
        //String Descript;
        //String DescriptSelect;
        //Descript = Description.getItemAt(2);
        //DescriptSelect = (String) Description.getSelectedItem();
        //String[] imagenames={"OppoA1.jpg","OppoA1x.jpg","OppoA98.jpeg","OppoF23.jpg","OppoFindX6Pro.jpg"};
        //JComboBox();

    }//GEN-LAST:event_DescriptionActionPerformed

    private void DateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DateActionPerformed

    private void jRadioButtonMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem1ActionPerformed
        // TODO add your handling code here:
        Log_out();
    }//GEN-LAST:event_jRadioButtonMenuItem1ActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        this.setExtendedState(JFrame.ICONIFIED);
    }//GEN-LAST:event_logoutActionPerformed

    private void CategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CategoryActionPerformed

    private void Product_NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Product_NameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Product_NameActionPerformed

    private void Product_Name_StocksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Product_Name_StocksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Product_Name_StocksActionPerformed

    private void Description_StocksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Description_StocksActionPerformed
        // TODO add your handling code here:
        if (Description_Stocks.getSelectedItem() == "Select here...") {
            //Pic.setText("asdasd\n asdasdasd\n asdasdas");
            Pic.setIcon(null);
        } else if (Description_Stocks.getSelectedItem() == "Oppo F23") {
            ImageIcon Picture = new ImageIcon("src/picture/OppoF23.jpg");
            Pic.setIcon(Picture);
            //ImageIcon iic = new ImageIcon(getClass().getResource("picture"+imagenames[4]));
            //Pic.setIcon(iic);
        } else if (Description_Stocks.getSelectedItem() == "Oppo A98") {
            ImageIcon Picture1 = new ImageIcon("src/picture/OppoA98.jpeg");
            Pic.setIcon(Picture1);
        } else if (Description_Stocks.getSelectedItem() == "Oppo A1") {
            ImageIcon Picture2 = new ImageIcon("src/picture/OppoA1.jpg");
            Pic.setIcon(Picture2);
        } else if (Description_Stocks.getSelectedItem() == "Oppo A1x") {
            ImageIcon Picture3 = new ImageIcon("src/picture/OppoA1x.jpg");
            Pic.setIcon(Picture3);
        } else if (Description_Stocks.getSelectedItem() == "Oppo Find X6 Pro") {
            ImageIcon Picture4 = new ImageIcon("src/picture/OppoFindX6Pro.jpg");
            Pic.setIcon(Picture4);
        } else {
            System.out.println(". . . ");
        }
    }//GEN-LAST:event_Description_StocksActionPerformed

    private void Category_StocksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Category_StocksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Category_StocksActionPerformed

    private void Edit_StocksBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_StocksBActionPerformed
        // TODO add your handling code here:.
        try {
            stmt = conn.createStatement();
            int MId = Integer.parseInt(Product_ID_Stocks.getText());

            String ProductNameUpdate = Product_Name_Stocks.getText();
            String DescriptionUpdate = (String) Description_Stocks.getSelectedItem();
            String CategoryUpdate = (String) Category_Stocks.getSelectedItem();
            String PriceUpdate = Price_Stocks.getText();
            String StockUpdate = Stock_Stocks.getText();

            //String sql1 = "UPDATE stocks SET PRODUCT_NAME ='"+ProductNameUpdate+"', DESCRIPTION ='"+DescriptionUpdate+"', CATEGORY ='"+CategoryUpdate+"', PRICE ='"+PriceUpdate+"', STOCK ='"+StockUpdate+"', STATUS='Updated' WHERE PRODUCT_ID = '"+MId+"' ";
            //String sql2 = "UPDATE section SET GRADE_LEVEL ='"+MIncomingGradeLevel+"', LASTNAME ='"+MLastName+"', FIRSTNAME ='"+MFirstName+"', MIDDLENAME ='"+MMiddleName+"', SECTION ='"+MSection+"', SCHOOL_YEAR ='"+MSchoolYear+"' ";
            String sql1 = "UPDATE stocks SET PRODUCT_NAME ='" + ProductNameUpdate + "', DESCRIPTION ='" + DescriptionUpdate + "', CATEGORY ='" + CategoryUpdate + "', PRICE ='" + PriceUpdate + "', STOCK = STOCK +'" + StockUpdate + "' WHERE PRODUCT_ID = '" + MId + "' ";

            stmt.executeUpdate(sql1);
            DefaultTableModel model = (DefaultTableModel) HistoryTable.getModel(); // to refresh the show table
            model.setRowCount(0); // to direct input data into table
            //stmt.executeUpdate(sql2);
            JOptionPane.showMessageDialog(null, "Data is Successfully Added");
            showTotalItem();
            showRecord(); //show table
            Product_ID_Stocks.setText("");
            Product_Name_Stocks.setText("");
            Description_Stocks.setSelectedItem("");
            Category_Stocks.setSelectedItem("");
            Price_Stocks.setText("");
            Stock_Stocks.setText("");
            Pic.setIcon(null);
            

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_Edit_StocksBActionPerformed

    private void Clear_StocksBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Clear_StocksBActionPerformed
        // TODO add your handling code here:
        Description_Stocks.setSelectedItem("");
        Category_Stocks.setSelectedItem("");
        Price_Stocks.setText("");
        Stock_Stocks.setText("");
        DefaultTableModel model = (DefaultTableModel) HistoryTable.getModel(); // to refresh the show table
        model.setRowCount(0); // to direct input data into table
        showRecord(); //show table
        showTotalItem();


    }//GEN-LAST:event_Clear_StocksBActionPerformed

    private void HistoryTableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_HistoryTableAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_HistoryTableAncestorAdded

    private void UploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UploadActionPerformed
        // TODO add your handling code here:
        @SuppressWarnings("LocalVariableHidesMemberVariable")
        String filename; 
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f =chooser.getSelectedFile();
        //Pic.setIcon(new ImageIcon(f.toString()));
        filename = f.getAbsolutePath();
        ImageIcon imageIcon = new ImageIcon(new ImageIcon(filename).getImage().getScaledInstance(PicInsert.getWidth(), PicInsert.getHeight(), Image.SCALE_SMOOTH));
        PicInsert.setIcon(imageIcon);

        
        try{
            File image = new File(filename);
            FileInputStream fis = new FileInputStream(image);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte [] buf = new byte[1024];
            for(int readNum; (readNum=fis.read(buf)) !=-1;){
                bos.write(buf, 0, readNum);
            }
             person_image=bos.toByteArray();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_UploadActionPerformed

    private void Delete_StocksBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_StocksBActionPerformed
        // TODO add your handling code here:
        try {

            int response = JOptionPane.showConfirmDialog(this, "Do you want to Delete this Item?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            int PID = Integer.parseInt(Product_ID_Stocks.getText());

            if (response == JOptionPane.YES_OPTION) {

            stmt = conn.createStatement();
            String sql = "DELETE FROM stocks WHERE PRODUCT_ID ='" + PID + "' ";
            stmt.executeUpdate(sql);
            JOptionPane.showMessageDialog(null, "Record Are  Deleted");
            
                

            } else if (response == JOptionPane.NO_OPTION) {
                System.out.println("No... Option Selected..");
            } //else if(response==JOptionPane.CLOSED_OPTION)
            else {
                System.out.println("Close... Option Selected..");
            }
            
            String sql = "INSERT INTO history(PRODUCT_ID, PRODUCT_NAME, DESCRIPTION, CATEGORY, PRICE, STOCK, DATE, IMAGE) VALUES(?, ?, ?, ?, ?, ?, ?, ?)";
            pst = conn.prepareStatement(sql);
            pst.setString(1, Product_ID_Stocks.getText());
            pst.setString(2, Product_Name_Stocks.getText());
            pst.setString(3, (String) Description_Stocks.getSelectedItem());
            pst.setString(4, (String)Category_Stocks.getSelectedItem());
            pst.setString(5, Price_Stocks.getText());
            pst.setString(6, Stock.getText());
            pst.setString(7, Date.getText());
            pst.setBytes(8, person_image);
            //pst.setString(9, person.getText());
            pst.executeUpdate();
            showRecord();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please Input PRODUCT_ID . . . ");
        }
    }//GEN-LAST:event_Delete_StocksBActionPerformed

    private void SearchMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchMouseReleased
        // TODO add your handling code here:
        String searchString = Search.getText();
        search(searchString);

    }//GEN-LAST:event_SearchMouseReleased

    private void Clear_StocksB2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Clear_StocksB2ActionPerformed
        // TODO add your handling code here:
        String searchString = Search.getText();
        search(searchString);
        try {
            stmt = conn.createStatement();

            //int MId = Integer.parseInt(Search.getText());
            String PID = Search.getText();

            String sql = "SELECT * FROM stocks WHERE PRODUCT_ID ='" + PID + "' and (STATUS='Added' or STATUS='Updated' or STATUS='Restored')";
            rs = stmt.executeQuery(sql);

            if (rs.next()) {

                Product_ID_Stocks.setText(rs.getString("PRODUCT_ID"));
                Product_Name_Stocks.setText(rs.getString("PRODUCT_NAME"));
                Description_Stocks.setSelectedItem(rs.getString("DESCRIPTION"));
                Category_Stocks.setSelectedItem(rs.getString("CATEGORY"));
                Price_Stocks.setText(rs.getString("PRICE"));
                //Stock_Stocks.setText(rs.getString("STOCK"));

            } else {
                JOptionPane.showMessageDialog(null, "Record Not Found");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_Clear_StocksB2ActionPerformed

    private void OptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptionActionPerformed
        // TODO add your handling code here:

        //String response = JOptionPane.showInputDialog("Please Enter PIN. . .", "Confirm");
        //String password = JOptionPane.showInputDialog(null, "Please enter PIN", "PASSWORD",JOptionPane.PLAIN_MESSAGE);
        //JOptionPane.showMessageDialog(null, "Enter Password:"+password);
        //JOptionPane.showOptionDialog(null, "Pin is Correct", "Mensahe", 0, JOptionPane.QUESTION_MESSAGE,null,null , null);
        
        //JFrame f = new JFrame("Password Field");
        //JPasswordField value = new JPasswordField();
        //JLabel l1 = new JLabel("Password");
        //l1.setBounds(20, 100, 80, 30);
        //value.setBounds(100, 100, 100, 30);
        //f.add(value);
        //f.add(l1);
        //f.setLayout(null);
        //f.setVisible(true);

        String password = "136633070389";
        JOptionPane.showMessageDialog(null, "Please enter your PIN. . .");
        String input = JOptionPane.showInputDialog(null, "PIN:");

        if (input.equals(password)) {
            cardlayout.removeAll();
            cardlayout.add(OptionPanel);
            cardlayout.repaint();
            cardlayout.revalidate();
        } else {
            JOptionPane.showMessageDialog(null, "Wrong PIN. . .");
        }


    }//GEN-LAST:event_OptionActionPerformed

    private void cptable_stocksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cptable_stocksMouseClicked
        // TODO add your handling code here:
        StocksTableSearch();
         //int i = cptable_stocks.getSelectedRow();
        //TableModel model123 = cptable_stocks.getModel();
        //Product_ID_Stocks.setText(model123.getValueAt(i,1).toString());
        //Product_Name_Stocks.setText(model123.getValueAt(i,2).toString());
        //Category_Stocks.setSelectedItem(model123.getValueAt(i,3).toString());
        //Description_Stocks.setSelectedItem(model123.getValueAt(i,4).toString());
        //Price_Stocks.setText(model123.getValueAt(i,5).toString());
        //Stock_Stocks.setText(model123.getValueAt(i,6).toString());
                
                
       // byte[] img = (userList().get(i).getImage());
        //ImageIcon imageIcon = new ImageIcon(new ImageIcon(img).getImage().getScaledInstance(Pic.getWidth(), Pic.getHeight(), Image.SCALE_SMOOTH));
        //Pic.setIcon(imageIcon);
    }//GEN-LAST:event_cptable_stocksMouseClicked

    private void SearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBarActionPerformed
        // TODO add your handling code here:
        try {
            if (SearchBar.getSelectedItem() == "Select Here. . .") {
                System.out.println(". . . ");
            }
            else if (SearchBar.getSelectedItem() == "Out Product") {
                stmt = conn.createStatement();
                //String name = CustomerName.getText();
                //String date = Date.getText();
                String sql = "SELECT TRANSACTION_NO, STOCK, DESCRIPTION, PRICE, DATE FROM transaction_history ORDER BY DATE";
                ResultSet res = stmt.executeQuery(sql);
                HistoryTable.setModel(DbUtils.resultSetToTableModel(res));
            }
            else if (SearchBar.getSelectedItem() == "Item") {
                stmt = conn.createStatement();
                String sql = "SELECT PRODUCT_ID, DATE, PRODUCT_NAME, DESCRIPTION, CATEGORY, PRICE, STOCK FROM stocks";
                ResultSet res = stmt.executeQuery(sql);
                HistoryTable.setModel(DbUtils.resultSetToTableModel(res));

            } else if (SearchBar.getSelectedItem() == "Deleted") {
                stmt = conn.createStatement();
                String sql3 = "SELECT PRODUCT_ID, DATE, PRODUCT_NAME, DESCRIPTION, CATEGORY, PRICE, STOCK FROM history WHERE STATUS='Deleted'";
                ResultSet res = stmt.executeQuery(sql3);
                HistoryTable.setModel(DbUtils.resultSetToTableModel(res));
            } else {
                System.out.println(". . . ");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_SearchBarActionPerformed

    private void showActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showActionPerformed
        // TODO add your handling code here:
        if (show.isSelected()) {
            Password.setEchoChar((char) 0);
        } else {
            Password.setEchoChar('*');
        }
    }//GEN-LAST:event_showActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        
        
        try{
            String sql = "INSERT INTO admin(USER_ID, FULLNAME, USERNAME, PASSWORD, USER_LEVEL, DATE, PICTURE) VALUES(?, ?, ?, ?, ?, ?, ?)";
            pst = conn.prepareStatement(sql);
            pst.setString(1, UserID.getText());
            pst.setString(2, Fullname.getText());
            pst.setString(3, Username.getText());
            pst.setString(4, Password.getText());
            pst.setString(5, UserLevel.getText());
            pst.setString(6, Date.getText());
            pst.setBytes(7, person_image);
            //pst.setString(9, person.getText());
            pst.executeUpdate();
            Auto_Increment_User();
            showRecord(); //show table
            
            JOptionPane.showMessageDialog(null, "Data is Successfully inserted");
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
           
        //try {
        //    stmt = conn.createStatement();
        //    String sql = "INSERT INTO admin(USER_ID, FULLNAME, USERNAME, PASSWORD, USERR_LEVEL) VALUES('" + UserID.getText() + "','" + Fullname.getText() + "','" + Username.getText() + "','" + Password.getText() + "','" + UserLevel.getText() + "')";
        //    stmt.executeUpdate(sql);
        //    DefaultTableModel model2 = (DefaultTableModel) UserTable.getModel(); // to refresh the show table
        //    model.setRowCount(0); // to direct input data into table
        //    showRecord(); //show table
        //    Auto_Increment_User();

        //    JOptionPane.showMessageDialog(null, "Data is Successfully inserted");

        //} catch (HeadlessException | SQLException e) {
        //    JOptionPane.showMessageDialog(null, "Textbox is Empty");
            //JOptionPane.showMessageDialog(null, e);
        //}
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {
            stmt = conn.createStatement();
            int UID = Integer.parseInt(UserID.getText());

            String MFullname = Fullname.getText();
            String MUsername = Username.getText();
            String MPassword = Password.getText();
            String MUserLevel = UserLevel.getText();

            String sql1 = "UPDATE admin SET FULLNAME ='" + MFullname + "', USERNAME ='" + MUsername + "', PASSWORD ='" + MPassword + "', USER_LEVEL ='" + MUserLevel + "' WHERE USER_ID='" + UID + "'";

            stmt.executeUpdate(sql1);
            JOptionPane.showMessageDialog(null, "Data is Successfully Updated");
            showRecord();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
   
        try {

            int response = JOptionPane.showConfirmDialog(this, "Do you want to Delete this Item?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            int UID = Integer.parseInt(UserID.getText());

            if (response == JOptionPane.YES_OPTION) {

            stmt = conn.createStatement();
            String sql = "DELETE FROM admin WHERE USER_ID ='" + UID + "' ";
            stmt.executeUpdate(sql);
            JOptionPane.showMessageDialog(null, "Record Are  Deleted");
            showRecord();
                
            } else if (response == JOptionPane.NO_OPTION) {
                System.out.println("No... Option Selected..");
            } //else if(response==JOptionPane.CLOSED_OPTION)
            else {
                System.out.println("Close... Option Selected..");
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please Input PRODUCT_ID . . . ");
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void UserTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserTableMouseClicked
        // TODO add your handling code here:
        UserTableSearch();
    }//GEN-LAST:event_UserTableMouseClicked

    private void HistoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HistoryTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_HistoryTableMouseClicked

    private void TotalItemAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_TotalItemAncestorAdded
        // TODO add your handling code here:

    }//GEN-LAST:event_TotalItemAncestorAdded

    private void TotalPriceAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_TotalPriceAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_TotalPriceAncestorAdded

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchActionPerformed

    private void PurchaseNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PurchaseNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PurchaseNameActionPerformed

    private void PurchaseIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PurchaseIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PurchaseIDActionPerformed

    private void ClearBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBActionPerformed
        // TODO add your handling code here:
        try {
            stmt = conn.createStatement();
            int PurchaseId = Integer.parseInt(PurchaseID.getText());
            String Purchase = PurchaseQty.getText();

            //String sql1 = "UPDATE stocks SET PRODUCT_NAME ='"+ProductNameUpdate+"', DESCRIPTION ='"+DescriptionUpdate+"', CATEGORY ='"+CategoryUpdate+"', PRICE ='"+PriceUpdate+"', STOCK ='"+StockUpdate+"', STATUS='Updated' WHERE PRODUCT_ID = '"+MId+"' ";
            //String sql2 = "UPDATE section SET GRADE_LEVEL ='"+MIncomingGradeLevel+"', LASTNAME ='"+MLastName+"', FIRSTNAME ='"+MFirstName+"', MIDDLENAME ='"+MMiddleName+"', SECTION ='"+MSection+"', SCHOOL_YEAR ='"+MSchoolYear+"' ";
            String sql1 = "UPDATE stocks SET STOCK = STOCK +'" + Purchase + "' WHERE PRODUCT_ID = '" + PurchaseId + "' ";

            stmt.executeUpdate(sql1);
            DefaultTableModel model = (DefaultTableModel) HistoryTable.getModel(); // to refresh the show table
            model.setRowCount(0); // to direct input data into table
            showRecord(); //show table
            //stmt.executeUpdate(sql2);
            //JOptionPane.showMessageDialog(null,"Data is Successfully Updated");
            //showTotalItem();

            stmt = conn.createStatement();
            String back = TransactionID.getText();
            String sql2 = "DELETE FROM transaction_history WHERE TRANSACTION_NO='" +back+ "'";
            //String sql1 = "INSERT INTO section(GRADE_LEVEL, LASTNAME, FIRSTNAME, MIDDLENAME, SECTION, SCHOOL_YEAR) VALUES('"+GradeLevel.getSelectedItem()+"','"+LastName.getText()+"','"+FirstName.getText()+"','"+MiddleName.getText()+"','"+Section.getSelectedItem()+"','"+SchoolYear.getSelectedItem()+"') ";
            //String sql = "INSERT INTO `enrollment2019`.`students` (`LASTNAME`, `FIRSTNAME`, `MIDDLENAME`, `SEX`, `AGE`, `GRADE`, `SECTION`, `ADDRESS`) VALUES (?, ?, ?, ?, ?, ?, ?)";
            stmt.executeUpdate(sql2);
            DefaultTableModel model2 = (DefaultTableModel) PurchaseTable.getModel(); // to refresh the show table
            model.setRowCount(0); // to direct input data into table
            showRecord(); //show table
            Auto_IncrementTransaction();

            showTotalItem();

            //JOptionPane.showMessageDialog(null,"Data is Successfully inserted");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_ClearBActionPerformed

    private void PurchaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PurchaseButtonActionPerformed
        // TODO add your handling code here:
        try {
            stmt = conn.createStatement();
            int PurchaseId = Integer.parseInt(PurchaseID.getText());
            String Purchase = PurchaseQty.getText();

            //String sql1 = "UPDATE stocks SET PRODUCT_NAME ='"+ProductNameUpdate+"', DESCRIPTION ='"+DescriptionUpdate+"', CATEGORY ='"+CategoryUpdate+"', PRICE ='"+PriceUpdate+"', STOCK ='"+StockUpdate+"', STATUS='Updated' WHERE PRODUCT_ID = '"+MId+"' ";
            //String sql2 = "UPDATE section SET GRADE_LEVEL ='"+MIncomingGradeLevel+"', LASTNAME ='"+MLastName+"', FIRSTNAME ='"+MFirstName+"', MIDDLENAME ='"+MMiddleName+"', SECTION ='"+MSection+"', SCHOOL_YEAR ='"+MSchoolYear+"' ";
            String sql1 = "UPDATE stocks SET STOCK = STOCK -'" + Purchase + "' WHERE PRODUCT_ID='" + PurchaseId + "' ";

            stmt.executeUpdate(sql1);
            DefaultTableModel model = (DefaultTableModel) PurchaseTable.getModel(); // to refresh the show table
            model.setRowCount(0); // to direct input data into table
            showRecord(); //show table
            //stmt.executeUpdate(sql2);
            //JOptionPane.showMessageDialog(null,"Data is Successfully Updated");

            stmt = conn.createStatement();
            String sql2 = "INSERT INTO transaction_history(TRANSACTION_NO, PRODUCT_ID, CUSTOMER_NAME, DESCRIPTION, PRICE, STOCK, DATE) VALUES('" + TransactionID.getText() + "','" + PurchaseID.getText() + "','" + CustomerName.getText() + "','" + PurchaseName.getText() + "','" + PurchasePrice.getText() + "','" + PurchaseQty.getText() + "','" + Date.getText() + "')";
            //String sql1 = "INSERT INTO section(GRADE_LEVEL, LASTNAME, FIRSTNAME, MIDDLENAME, SECTION, SCHOOL_YEAR) VALUES('"+GradeLevel.getSelectedItem()+"','"+LastName.getText()+"','"+FirstName.getText()+"','"+MiddleName.getText()+"','"+Section.getSelectedItem()+"','"+SchoolYear.getSelectedItem()+"') ";
            //String sql = "INSERT INTO `enrollment2019`.`students` (`LASTNAME`, `FIRSTNAME`, `MIDDLENAME`, `SEX`, `AGE`, `GRADE`, `SECTION`, `ADDRESS`) VALUES (?, ?, ?, ?, ?, ?, ?)";
            stmt.executeUpdate(sql2);
            DefaultTableModel model2 = (DefaultTableModel) TransactionTable.getModel(); // to refresh the show table
            model.setRowCount(0); // to direct input data into table
            showRecord(); //show table
            Auto_IncrementTransaction();
            showTotalItem();

            String lines = "=========================================================================";

            String ProductName = PurchaseName.getText();
            String Price = PurchasePrice.getText();
            String Qantity = PurchaseQty.getText();
            String ID = TransactionID.getText();
            String date = Date.getText();

            Reciept.append("ID: " + ID + " | ProductName: " + ProductName + " | Price: " + Price + " | Qantity: " + Qantity + " | Date: " + date + "\n\n");
            PurchaseQty.setText("");
            //JOptionPane.showMessageDialog(null,"Data is Successfully inserted");
        } catch (Exception e) {
            //JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_PurchaseButtonActionPerformed

    private void CustomerNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CustomerNameMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_CustomerNameMouseClicked

    private void CustomerNameMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CustomerNameMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_CustomerNameMouseReleased

    private void CustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CustomerNameActionPerformed

    private void PurchasePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PurchasePriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PurchasePriceActionPerformed

    private void PurchaseTotalItemAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_PurchaseTotalItemAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_PurchaseTotalItemAncestorAdded

    private void ClearB4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearB4ActionPerformed
        // TODO add your handling code here:
        jTextReciept.setText("");
        Product_Picture.setIcon(null);
        PurchaseID.setText("");
        PurchasePrice.setText("");
        PurchaseName.setText("");
        PurchaseQty.setText("");
    }//GEN-LAST:event_ClearB4ActionPerformed

    private void PrintTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintTransactionActionPerformed
        // TODO add your handling code here:
        MessageFormat header = new MessageFormat("\t\t- RECEIPT -\n\n");
        MessageFormat footer = new MessageFormat("Page{0, number, integer}");

        try {

            //PurchaseTable.print(JTable.PrintMode.NORMAL, header, footer);
            //PurchaseTable.print();
            Reciept.print(header, footer);
        } catch (java.awt.print.PrinterException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        try {

            Reciept.print();
        } catch (java.awt.print.PrinterException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_PrintTransactionActionPerformed

    private void PurchaseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PurchaseTableMouseClicked
        // TODO add your handling code here:
        PurchasedTableSearch();
    }//GEN-LAST:event_PurchaseTableMouseClicked

    private void RefreshBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshBActionPerformed
        // TODO add your handling code here:
        Product_Picture.setIcon(null);
        PurchaseID.setText("");
        PurchasePrice.setText("");
        PurchaseName.setText("");
        PurchaseQty.setText("");
        DefaultTableModel model = (DefaultTableModel) HistoryTable.getModel(); // to refresh the show table
        model.setRowCount(0); // to direct input data into table
        showRecord(); //show table
        showTotalItem();
    }//GEN-LAST:event_RefreshBActionPerformed

    private void TransactionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TransactionTableMouseClicked
        // TODO add your handling code here:
        TransactionTableSearch();
    }//GEN-LAST:event_TransactionTableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {

            String lines = "=========================================================================";
            String CustomerNameS = CustomerName.getText();
            String PurchaseTotalItemS = PurchaseTotalItem.getText();
            String TotalPricePurchaseS = TotalPricePurchase.getText();
            //String ContactNo = Contact.getText();

            Reciept.append("\n" + lines + "\n - STORE NAME: " + CustomerNameS + "  |  \n\nTOTAL ITEM: " + PurchaseTotalItemS + "\nTOTAL PRICE: " + TotalPricePurchaseS);
            //jTextReciept.setText("\n\n\t\t\tThanks for Order!!");
            JOptionPane.showMessageDialog(null, "Successfully Save!! \nReady to Print!!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void PurchaseQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PurchaseQtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PurchaseQtyActionPerformed

    private void Description_StocksPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_Description_StocksPropertyChange
        // TODO add your handling code here:
        if (Description_Stocks.getSelectedItem() == "Select here...") {
            //Pic.setText("asdasd\n asdasdasd\n asdasdas");
            Pic.setIcon(null);
        } else if (Description_Stocks.getSelectedItem() == "Oppo F23") {
            ImageIcon Picture = new ImageIcon("src/picture/OppoF23.jpg");
            Pic.setIcon(Picture);
            //ImageIcon iic = new ImageIcon(getClass().getResource("picture"+imagenames[4]));
            //Pic.setIcon(iic);
        } else if (Description_Stocks.getSelectedItem() == "Oppo A98") {
            ImageIcon Picture1 = new ImageIcon("src/picture/OppoA98.jpeg");
            Pic.setIcon(Picture1);
        } else if (Description_Stocks.getSelectedItem() == "Oppo A1") {
            ImageIcon Picture2 = new ImageIcon("src/picture/OppoA1.jpg");
            Pic.setIcon(Picture2);
        } else if (Description_Stocks.getSelectedItem() == "Oppo A1x") {
            ImageIcon Picture3 = new ImageIcon("src/picture/OppoA1x.jpg");
            Pic.setIcon(Picture3);
        } else if (Description_Stocks.getSelectedItem() == "Oppo Find X6 Pro") {
            ImageIcon Picture4 = new ImageIcon("src/picture/OppoFindX6Pro.jpg");
            Pic.setIcon(Picture4);
        } else {
            System.out.println(". . . ");
        }
    }//GEN-LAST:event_Description_StocksPropertyChange

    private void Edit_StocksB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_StocksB1ActionPerformed
        // TODO add your handling code here:
        try {
            stmt = conn.createStatement();
            int MId = Integer.parseInt(Product_ID_Stocks.getText());

            String ProductNameUpdate = Product_Name_Stocks.getText();
            String DescriptionUpdate = (String) Description_Stocks.getSelectedItem();
            String CategoryUpdate = (String) Category_Stocks.getSelectedItem();
            String PriceUpdate = Price_Stocks.getText();
            //String StockUpdate = Stock_Stocks.getText();

            //String sql1 = "UPDATE stocks SET PRODUCT_NAME ='"+ProductNameUpdate+"', DESCRIPTION ='"+DescriptionUpdate+"', CATEGORY ='"+CategoryUpdate+"', PRICE ='"+PriceUpdate+"', STOCK ='"+StockUpdate+"', STATUS='Updated' WHERE PRODUCT_ID = '"+MId+"' ";
            //String sql2 = "UPDATE section SET GRADE_LEVEL ='"+MIncomingGradeLevel+"', LASTNAME ='"+MLastName+"', FIRSTNAME ='"+MFirstName+"', MIDDLENAME ='"+MMiddleName+"', SECTION ='"+MSection+"', SCHOOL_YEAR ='"+MSchoolYear+"' ";
            String sql1 = "UPDATE stocks SET PRODUCT_NAME ='" + ProductNameUpdate + "', DESCRIPTION ='" + DescriptionUpdate + "', CATEGORY ='" + CategoryUpdate + "', PRICE ='" + PriceUpdate + "' WHERE PRODUCT_ID = '" + MId + "' ";

            stmt.executeUpdate(sql1);
            DefaultTableModel model = (DefaultTableModel) HistoryTable.getModel(); // to refresh the show table
            model.setRowCount(0); // to direct input data into table
            //stmt.executeUpdate(sql2);
            JOptionPane.showMessageDialog(null, "Data is Successfully Updated");
            showTotalItem();
            showRecord(); //show table
            Product_ID_Stocks.setText("");
            Product_Name_Stocks.setText("");
            Description_Stocks.setSelectedItem("");
            Category_Stocks.setSelectedItem("");
            Price_Stocks.setText("");
            Stock_Stocks.setText("");
            Pic.setIcon(null);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_Edit_StocksB1ActionPerformed

    private void SearchBarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchBarMouseClicked
        // TODO add your handling code here:
        try {
            if (SearchBar.getSelectedItem() == "Select Here. . .") {
                System.out.println(". . . ");
            }
            else if (SearchBar.getSelectedItem() == "Out Product") {
                stmt = conn.createStatement();
                //String name = CustomerName.getText();
                //String date = Date.getText();
                String sql = "SELECT TRANSACTION_NO, STOCK, DESCRIPTION, PRICE, DATE FROM transaction_history ORDER BY DATE";
                ResultSet res = stmt.executeQuery(sql);
                HistoryTable.setModel(DbUtils.resultSetToTableModel(res));
            }
            else if (SearchBar.getSelectedItem() == "Item") {
                stmt = conn.createStatement();
                String sql = "SELECT PRODUCT_ID, DATE, PRODUCT_NAME, DESCRIPTION, CATEGORY, PRICE, STOCK FROM stocks";
                ResultSet res = stmt.executeQuery(sql);
                HistoryTable.setModel(DbUtils.resultSetToTableModel(res));

            } else if (SearchBar.getSelectedItem() == "Deleted") {
                stmt = conn.createStatement();
                String sql3 = "SELECT PRODUCT_ID, DATE, PRODUCT_NAME, DESCRIPTION, CATEGORY, PRICE, STOCK FROM history WHERE STATUS='Deleted'";
                ResultSet res = stmt.executeQuery(sql3);
                HistoryTable.setModel(DbUtils.resultSetToTableModel(res));
            } else {
                System.out.println(". . . ");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_SearchBarMouseClicked

    private void UserPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserPhotoActionPerformed
        // TODO add your handling code here:
        @SuppressWarnings("LocalVariableHidesMemberVariable")
        String filename; 
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f =chooser.getSelectedFile();
        //Pic.setIcon(new ImageIcon(f.toString()));
        filename = f.getAbsolutePath();
        ImageIcon imageIcon = new ImageIcon(new ImageIcon(filename).getImage().getScaledInstance(UserPicture.getWidth(), UserPicture.getHeight(), Image.SCALE_SMOOTH));
        UserPicture.setIcon(imageIcon);

        
        try{
            File image = new File(filename);
            FileInputStream fis = new FileInputStream(image);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte [] buf = new byte[1024];
            for(int readNum; (readNum=fis.read(buf)) !=-1;){
                bos.write(buf, 0, readNum);
            }
             person_image=bos.toByteArray();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_UserPhotoActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        UserPicture.setIcon(null);
        Auto_Increment_User();
        Fullname.setText("");
        Username.setText("");
        Password.setText("");
        UserLevel.setText("");
        showRecord();
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void Price_StocksKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Price_StocksKeyPressed
        // TODO add your handling code here:
        String Number = Price_Stocks.getText();
        //get length of string
        int length = Number.length();
        
        char c = evt.getKeyChar();
        if(evt.getKeyChar()>='0' && evt.getKeyChar()<='9'){
            //chech for length not more than 10 digits
            if(length<10){
                //editable true
                Price_Stocks.setEditable(true);
            }else{
                //not editable if length more than 10 digit
                Price_Stocks.setEditable(false);
            }
        }else
        {
            //now allow for keys 'back space' and 'delete' for edit
            if(evt.getExtendedKeyCode()==KeyEvent.VK_BACK_SPACE ||evt.getExtendedKeyCode()==KeyEvent.VK_DELETE){
                //than allow editable
                Price_Stocks.setEditable(true);
            }else
            {
                Price_Stocks.setEditable(false);
            }
        }
    }//GEN-LAST:event_Price_StocksKeyPressed

    private void Stock_StocksKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Stock_StocksKeyPressed
        // TODO add your handling code here:
        String Number = Stock_Stocks.getText();
        //get length of string
        int length = Number.length();
        
        char c = evt.getKeyChar();
        if(evt.getKeyChar()>='0' && evt.getKeyChar()<='9'){
            //chech for length not more than 10 digits
            if(length<10){
                //editable true
                Stock_Stocks.setEditable(true);
            }else{
                //not editable if length more than 10 digit
                Stock_Stocks.setEditable(false);
            }
        }else
        {
            //now allow for keys 'back space' and 'delete' for edit
            if(evt.getExtendedKeyCode()==KeyEvent.VK_BACK_SPACE ||evt.getExtendedKeyCode()==KeyEvent.VK_DELETE){
                //than allow editable
                Stock_Stocks.setEditable(true);
            }else
            {
                Stock_Stocks.setEditable(false);
            }
        }
    }//GEN-LAST:event_Stock_StocksKeyPressed

    private void PurchaseQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PurchaseQtyKeyPressed
        // TODO add your handling code here:
        String Number = PurchaseQty.getText();
        //get length of string
        int length = Number.length();
        
        char c = evt.getKeyChar();
        if(evt.getKeyChar()>='0' && evt.getKeyChar()<='9'){
            //chech for length not more than 10 digits
            if(length<10){
                //editable true
                PurchaseQty.setEditable(true);
            }else{
                //not editable if length more than 10 digit
                PurchaseQty.setEditable(false);
            }
        }else
        {
            //now allow for keys 'back space' and 'delete' for edit
            if(evt.getExtendedKeyCode()==KeyEvent.VK_BACK_SPACE ||evt.getExtendedKeyCode()==KeyEvent.VK_DELETE){
                //than allow editable
                PurchaseQty.setEditable(true);
            }else
            {
                PurchaseQty.setEditable(false);
            }
        }
    }//GEN-LAST:event_PurchaseQtyKeyPressed

    private void PriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PriceKeyPressed
        // TODO add your handling code here:
        String Number = Price.getText();
        //get length of string
        int length = Number.length();
        
        char c = evt.getKeyChar();
        if(evt.getKeyChar()>='0' && evt.getKeyChar()<='9'){
            //chech for length not more than 10 digits
            if(length<10){
                //editable true
                Price.setEditable(true);
            }else{
                //not editable if length more than 10 digit
                Price.setEditable(false);
            }
        }else
        {
            //now allow for keys 'back space' and 'delete' for edit
            if(evt.getExtendedKeyCode()==KeyEvent.VK_BACK_SPACE ||evt.getExtendedKeyCode()==KeyEvent.VK_DELETE){
                //than allow editable
                Price.setEditable(true);
            }else
            {
                Price.setEditable(false);
            }
        }
    }//GEN-LAST:event_PriceKeyPressed

    private void StockKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_StockKeyPressed
        // TODO add your handling code here:
        String Number = Stock.getText();
        //get length of string
        int length = Number.length();
        
        char c = evt.getKeyChar();
        if(evt.getKeyChar()>='0' && evt.getKeyChar()<='9'){
            //chech for length not more than 10 digits
            if(length<10){
                //editable true
                Stock.setEditable(true);
            }else{
                //not editable if length more than 10 digit
                Stock.setEditable(false);
            }
        }else
        {
            //now allow for keys 'back space' and 'delete' for edit
            if(evt.getExtendedKeyCode()==KeyEvent.VK_BACK_SPACE ||evt.getExtendedKeyCode()==KeyEvent.VK_DELETE){
                //than allow editable
                Stock.setEditable(true);
            }else
            {
                Stock.setEditable(false);
            }
        }
    }//GEN-LAST:event_StockKeyPressed

    private void DescriptionComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_DescriptionComponentAdded
        // TODO add your handling code here:
        //JComboBox();
    }//GEN-LAST:event_DescriptionComponentAdded

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add_Item;
    private javax.swing.JComboBox<String> Category;
    private javax.swing.JComboBox<String> Category_Stocks;
    private javax.swing.JButton Clear;
    private javax.swing.JButton ClearB;
    private javax.swing.JButton ClearB4;
    private javax.swing.JButton Clear_StocksB;
    private javax.swing.JButton Clear_StocksB2;
    private javax.swing.JTextField CustomerName;
    private javax.swing.JTextField Date;
    private javax.swing.JLabel DateNTime0;
    private javax.swing.JLabel DateNTime2;
    private javax.swing.JLabel DateNTime3;
    private javax.swing.JLabel DateNTime4;
    private javax.swing.JLabel DateNTime5;
    private javax.swing.JButton Delete_StocksB;
    private javax.swing.JComboBox<String> Description;
    private javax.swing.JComboBox<String> Description_Stocks;
    private javax.swing.JButton Edit_StocksB;
    private javax.swing.JButton Edit_StocksB1;
    private javax.swing.JTextField Fullname;
    private javax.swing.JButton HistoryB;
    private javax.swing.JPanel HistoryPanel;
    private javax.swing.JTable HistoryTable;
    private javax.swing.JPanel InStockPanel;
    private javax.swing.JLabel IncomeToday;
    private javax.swing.JPanel InsertPanel;
    private javax.swing.JButton ItemsB;
    private javax.swing.JRadioButtonMenuItem Option;
    private javax.swing.JPanel OptionPanel;
    private javax.swing.JPanel OutStockPanel;
    private javax.swing.JPasswordField Password;
    private javax.swing.JLabel Pic;
    private javax.swing.JLabel PicInsert;
    private javax.swing.JTextField Price;
    private javax.swing.JTextField Price_Stocks;
    private javax.swing.JButton PrintTransaction;
    private javax.swing.JTextField Product_ID;
    private javax.swing.JTextField Product_ID_Stocks;
    private javax.swing.JTextField Product_Name;
    private javax.swing.JTextField Product_Name_Stocks;
    private javax.swing.JLabel Product_Picture;
    private javax.swing.JButton PurchaseB;
    private javax.swing.JButton PurchaseButton;
    private javax.swing.JTextField PurchaseID;
    private javax.swing.JTextField PurchaseName;
    private javax.swing.JTextField PurchasePrice;
    private javax.swing.JTextField PurchaseQty;
    private javax.swing.JTable PurchaseTable;
    private javax.swing.JLabel PurchaseTotalItem;
    private javax.swing.JTextArea Reciept;
    private javax.swing.JButton RefreshB;
    private javax.swing.JTextField Search;
    private javax.swing.JComboBox<String> SearchBar;
    private javax.swing.JTextField Stock;
    private javax.swing.JTextField Stock_Stocks;
    private javax.swing.JButton StocksB;
    private javax.swing.JLabel TotalBalance;
    private javax.swing.JLabel TotalIncome;
    private javax.swing.JLabel TotalItem;
    private javax.swing.JLabel TotalPrice;
    private javax.swing.JLabel TotalPricePurchase;
    private javax.swing.JLabel TotalPricePurchase3;
    private javax.swing.JLabel TotalSales;
    private javax.swing.JLabel TotalStock;
    private javax.swing.JTextField TransactionID;
    private javax.swing.JTable TransactionTable;
    private javax.swing.JButton Upload;
    private javax.swing.JTextField UserID;
    private javax.swing.JTextField UserLevel;
    private javax.swing.JButton UserPhoto;
    private javax.swing.JLabel UserPicture;
    private javax.swing.JTable UserTable;
    private javax.swing.JTextField Username;
    private javax.swing.JPanel cardlayout;
    private javax.swing.JTable cptable_stocks;
    private javax.swing.JPanel home;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTextPane jTextReciept;
    private javax.swing.JRadioButtonMenuItem logout;
    private javax.swing.JCheckBox show;
    // End of variables declaration//GEN-END:variables
    //byte[] photo=null;
    //String filename=null;
    private ImageIcon format = null;
    /**
     *
     */

}
